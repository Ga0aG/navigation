#!/usr/bin/env python
# CCBSO Planner configuration


from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()


# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
# add_generic_localplanner_params(gen)

# name, paramtype, level, description, default, min, max

gen.add("psize", int_t, 0, "The number of samples to use when exploring the x velocity space", 20, 5, 100)
gen.add("iteration", int_t, 0, "Number of BSO iteration", 50, 5, 500)
# debug
gen.add("show_poseArray", bool_t, 0, "Show the trail of robot in poseArray.", True)
gen.add("pheromone_forever", bool_t, 0, "Keep pheromone.", False)
gen.add("clear_pheromone", bool_t, 0, "Keep pheromone.", False)

gen.add("max_vel_x", double_t, 0, "Maximum translational velocity of the robot", 0.22, 0.01, 3)   
gen.add("max_rot_vel", double_t, 0, "Maximum translational velocity of the robot", 2.75, 0.01, 3)   
gen.add("acc_lim_x", double_t, 0, "Maximum linear acceleration of the robot", 2.5, 0.01, 3)   
gen.add("acc_lim_theta", double_t, 0, "Maximum angular acceleration of the robot", 3.2, 0.01, 4) 
gen.add("Pelitist", double_t, 0, "probability of choose a elitist", 0.5, 0.01, 0.99)   
gen.add("Pone", double_t, 0, "probability of choose one member", 0.7, 0.01, 0.99)  
gen.add("Rstep", double_t, 0, "Radius disturbance when generate a new individual", 0.1, 0.01, 0.99)  
gen.add("Astep", double_t, 0, "Angle disturbance when generate a new individual", 0.1, 0.01, 0.99)  
gen.add("pheromone_lasting", double_t, 0, "pheromone action time", 100.0, 0.01, 1000.0)  

gen.add("searchDis", double_t, 0, "search / lookahead distance of the robot", 1.0, 0.01, 4)   
gen.add("searchAngle", double_t, 0, "search angle of the robot", 1.9, 0.01, 3.14)   
gen.add("markedDis", double_t, 0, "parameter of visited area", 0.7, 0.01, 4) 
gen.add("markedAngle", double_t, 0, "parameter of visited area", 1.0472, 0.01, 3.14) 
gen.add("threDis", double_t, 0, "parameter of trail recording", 0.2, 0.01, 4) 
gen.add("threAngle", double_t, 0, "parameter of trail recording", 0.17, 0.01, 3.14) 

gen.add("weight_aa", double_t, 0, "weight of angular acceleration", 0.01, 0.001, 3.0) 
gen.add("weight_cruiser", double_t, 0, "weight of cruiser", 2.0, 0.01, 5.0)
gen.add("cruiser_max", double_t, 0, "shoule be bigger than max(mapSizeX,mapSizeY)", 5.0, 0.01, 10.0)
gen.add("pheromone", double_t, 0, "fundamental pheromone/ weight of pheromone", 2.0, 0.01, 30.0)
gen.add("weight_pc", double_t, 0, "weight of potential collision", 5.0, 0.001, 30.0) 
gen.add("weight_k", double_t, 0, "weight of keeper angle", 3.0, 0.001, 30.0) 
gen.add("weight_d", double_t, 0, "weight of distance to target", 0.7, 0.001, 3.0) 
gen.add("disToTarget", double_t, 0, "Expect distance to target", 1.0, 0.001, 5.0) 
gen.add("weight_g", double_t, 0, "weight of disturbance to subgoal", 1.0, 0.001, 3.0) 
gen.add("disToSubgoal", double_t, 0, "Choose subgoal", 0.3, 0.001, 5.0) 
gen.add("weight_u", double_t, 0, "weight of uniform distribution", 0.2, 0.001, 3.0) 


# gen.add("sim_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.7, 0)
# gen.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.025, 0)
# gen.add("angular_sim_granularity", double_t, 0, "The granularity with which to check for collisions for rotations in radians", 0.1, 0)

# gen.add("path_distance_bias", double_t, 0, "The weight for the path distance part of the cost function", 32.0, 0.0)
# gen.add("goal_distance_bias", double_t, 0, "The weight for the goal distance part of the cost function", 24.0, 0.0)
# gen.add("occdist_scale", double_t, 0, "The weight for the obstacle distance part of the cost function", 0.01, 0.0)
# gen.add("twirling_scale", double_t, 0, "The weight for penalizing any changes in robot heading", 0.0, 0.0)

# gen.add("stop_time_buffer", double_t, 0, "The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds", 0.2, 0)
# gen.add("oscillation_reset_dist", double_t, 0, "The distance the robot must travel before oscillation flags are reset, in meters", 0.05, 0)
# gen.add("oscillation_reset_angle", double_t, 0, "The angle the robot must turn before oscillation flags are reset, in radians", 0.2, 0)

# gen.add("forward_point_distance", double_t, 0, "The distance from the center point of the robot to place an additional scoring point, in meters", 0.325)

# gen.add("scaling_speed", double_t, 0, "The absolute value of the velocity at which to start scaling the robot's footprint, in m/s", 0.25, 0)
# gen.add("max_scaling_factor", double_t, 0, "The maximum factor to scale the robot's footprint by", 0.2, 0)

# gen.add("vx_samples", int_t, 0, "The number of samples to use when exploring the x velocity space", 3, 1)
# gen.add("vy_samples", int_t, 0, "The number of samples to use when exploring the y velocity space", 10, 1)
# gen.add("vth_samples", int_t, 0, "The number of samples to use when exploring the theta velocity space", 20, 1)

# gen.add("use_dwa", bool_t, 0, "Use dynamic window approach to constrain sampling velocities to small window.", True)

# gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)

exit(gen.generate("ccbso_local_planner", "ccbso_local_planner", "CCBSOPlanner"))
